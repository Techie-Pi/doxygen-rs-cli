use std::{fs, io};
use std::path::PathBuf;
use clap::Parser;
use doxygen_rs::{transform, transform_bindgen};

#[derive(Parser)]
#[command(version, about, long_about = None)]
struct Cli {
    input: PathBuf,
    output: PathBuf,
    #[arg(long)]
    remove_backup: Option<bool>,
}

fn main() -> io::Result<()> {
    let args: Cli = Cli::parse();
    let input = fs::read_to_string(&args.input).expect("Couldn't read file");

    let is_bindgen = input.contains("/* automatically generated by rust-bindgen");

    let transformed = if is_bindgen {
        transform_bindgen(input.as_str())
    } else {
        transform(input.as_str())
    };

    if args.input == args.output {
        let mut copy_location = args.input.clone();
        copy_location.set_extension("old.rs");

        fs::rename(args.input, &copy_location)?;
        fs::write(args.output, transformed)?;
        if let Some(remove) = args.remove_backup {
            if remove {
                fs::remove_file(&copy_location)?;
            }
        }
    } else {
        fs::write(args.output, transformed)?;
    }

    Ok(())
}